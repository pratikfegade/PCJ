buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.6.0'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

static def getDate() {
    return new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
}

defaultTasks 'info'

archivesBaseName = "pcj"
ext.versionNumber = "5.1"
ext.buildNumber = "unknown"

repositories {
    mavenCentral()
    flatDir {
	dirs 'lib'
    }
}

dependencies {
    // testCompile 'junit:junit:4.11'}
    implementation 'de.ruedigermoeller:fst:2.57'
}

compileJava {
    options.compilerArgs = [
            '-source', '1.8',
            '-target', '1.8',
            '-profile', 'compact3',
            '-Xlint:unchecked'
    ]
}

compileTestJava {
    options.compilerArgs += '-proc:none' // 'org.pcj.internal.StorageAnnotationProcessor'
}

task info {
    println "PCJ -- Parallel Computing in Java build script"
}

task javadoc(overwrite: true, type: Javadoc) {
    failOnError = false
    source = sourceSets.main.allJava
    exclude "org/pcj/internal/**"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'LICENSE'
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from 'LICENSE'
    from sourceSets.main.allJava
    from sourceSets.main.resources
    classifier = 'sources'
}

task snapshotBuild {
    snapshotBuild.dependsOn(jar, javadocJar, sourcesJar)
}

task interfaceJar(type: Jar, dependsOn: compileJava) {
    from sourceSets.main.output.classesDirs
    include 'org/pcj/*.class'
    classifier = 'interface'
}

assemble {
    dependsOn interfaceJar
}

task releaseBuild {
    outputs.upToDateWhen { false }
    releaseBuild.dependsOn(clean, build, javadocJar, sourcesJar)
}

task publishReleaseBuild {
    publishReleaseBuild.dependsOn(releaseBuild, publish)
}

gradle.taskGraph.whenReady { taskGraph ->
    def properties = new Properties()

    def versionFile = file('build.version')
    if (versionFile.canRead()) {
        versionFile.withReader { properties.load(it) }
    }

    if (properties['build.number'] == null) {
        properties['build.number'] = '0'
    }

    buildNumber = properties['build.number']
    if (taskGraph.hasTask(releaseBuild)) {
        publish.doLast {
            properties['build.number'] = (buildNumber.toInteger() + 1).toString()
            versionFile.withWriter { properties.store(it, null) }
        }
    } else {
        buildNumber = "$buildNumber-SNAPSHOT"
    }

    def repoId = [abbreviatedId: "unknown", id: "unknown"]
    try {
        repoId = org.ajoberstar.grgit.Grgit.open(project.file('.')).head()
    } catch (Exception) {
    }

    version = "$versionNumber.$buildNumber"
    jar.doFirst {
        classifier = ''
        manifest {
            attributes(
                'Specification-Version': "$version",
                'Implementation-Version': "$version-$repoId.abbreviatedId ($date)",
                'Git-Commit-Id': "$repoId.id",
                'Build-Time': date,
                'Built-By': System.getProperty('user.name')
            )
        }
    }

    if (taskGraph.hasTask(publish)) {
//        def snapshotsRepoUrl = "$buildDir/repos/snapshots"
//        def releasesRepoUrl = "$buildDir/repos/releases"
        def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
        def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
        publishing.repositories.maven.url = buildNumber.contains('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        if (publishing.repositories.maven.url.scheme == "https") {
            publishing.repositories.maven.credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

jar {
    from 'LICENSE'
    manifest {
        attributes(
                'Specification-Title': 'PCJ -- Parallel Computing in Java',
                'Implementation-Title': 'org.pcj',
                'Specification-Vendor': 'PCJ Library, Marek Nowicki',
                'Implementation-Vendor': 'Marek Nowicki',
                'Sealed': true,
                // 'Profile': 'compact3',
        )
        attributes(['Sealed': false], 'org/pcj/')
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'pl.edu.icm.pcj'
            artifactId = 'pcj'
            artifact sourcesJar
            artifact javadocJar
            pom {
                from components.java
                packaging 'jar'
                name = 'PCJ'
                description = 'PCJ is Java library for parallel computing in Java. It is based on the PGAS (Partitioned Global Address Space) paradigm. It allows for easy implementation in Java of any parallel algorithm. PCJ application can be run on laptop, workstation, cluster and HPC system including large supercomputers.'
                url = 'http://pcj.icm.edu.pl'
                licenses {
                    license {
                        name = 'The 3-Clause BSD License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                developers {
                    developer {
                        id = 'faramir'
                        name = 'Marek Nowicki'
                        email = 'faramir@mat.umk.pl'
                    }
                }
                scm {
                    url = 'https://github.com/hpdcj/PCJ'
                    connection = 'scm:git:git://github.com/hpdcj/PCJ.git'
                    developerConnection = 'scm:git:git@github.com:hpdcj/PCJ.git'
                }
            }
        }
    }
    repositories {
        maven {
            url = "$buildDir/repos/unknown"
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


// Code needed for running Main classes from Task Packages in NetBeans
def createJavaExec = { String taskName ->
    project.task(taskName, dependsOn: project.testClasses, type: JavaExec) {
        def definedMainClass = project.hasProperty('mainClass') ? project.mainClass : ''
        if (definedMainClass == null) definedMainClass = ''
        definedMainClass = definedMainClass.toString()

        main = definedMainClass
        classpath = project.sourceSets.test.runtimeClasspath
        standardInput = System.in
        //jvmArgs = ["-Xmx3g","-Xms3g"]
        maxHeapSize = "2g"

    }
}

createJavaExec('run')
